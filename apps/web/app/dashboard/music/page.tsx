"use client";
import { useSession, signIn, signOut } from "next-auth/react";
import dynamic from "next/dynamic";

// ‚úÖ AJOUTS MINIMAUX
import { useEffect, useRef } from "react";

const SpotifyPlayer = dynamic(() => import("@/components/SpotifyPlayer"), { ssr: false });
const Timer = dynamic(() => import("@/components/Timer"), { ssr: false });

export default function MusicPage() {
  const { data: session, status } = useSession();

  // ‚úÖ AJOUTS : refs pour surveiller le Timer et jouer le son UNIQUEMENT √† la fin
  const timerHostRef = useRef<HTMLDivElement | null>(null);
  const lastSecRef = useRef<number | null>(null);  // derni√®re valeur (en s)
  const countingDownRef = useRef(false);           // a r√©ellement commenc√© √† d√©cr√©menter
  const hasBeepedRef = useRef(false);              // √©viter double son

  // Parse le texte du Timer en secondes (supporte "30s" et "MM:SS")
  const parseSeconds = (txt: string): number | null => {
    const mS = txt.match(/(\d+)\s*s\b/); // "30s"
    if (mS) return parseInt(mS[1], 10);
    const mMS = txt.match(/\b(\d{1,2}):(\d{2})\b/); // "MM:SS"
    if (mMS) return parseInt(mMS[1], 10) * 60 + parseInt(mMS[2], 10);
    return null;
  };

  // üîî Son ‚Äúexercice fini‚Äù ‚Äî cr√©√© et jou√© *uniquement* √† 0s
  const playFinishChime = async () => {
    // ‚ö†Ô∏è L‚ÄôAudioContext n‚Äôest cr√©√© qu‚Äôici (√† la fin)
    const Ctx = (window.AudioContext || (window as any).webkitAudioContext);
    const ctx: AudioContext = new Ctx();

    const makeNote = (freq: number, start: number, dur = 0.18) => {
      const osc = ctx.createOscillator();
      const gain = ctx.createGain();
      osc.type = "triangle";         // chime clair/agr√©able
      osc.frequency.value = freq;
      osc.connect(gain);
      gain.connect(ctx.destination);

      gain.gain.setValueAtTime(0.0001, start);
      gain.gain.linearRampToValueAtTime(0.7, start + 0.015);
      gain.gain.exponentialRampToValueAtTime(0.001, start + dur);

      osc.start(start);
      osc.stop(start + dur + 0.05);
    };

    const now = ctx.currentTime;
    // petite double note ‚Äúfini‚Äù
    makeNote(1318.51, now + 0.00, 0.18); // E6
    makeNote(1760.0,  now + 0.20, 0.20); // A6
  };

  // Observe le Timer :
  // - attend une vraie d√©cr√©mentation (ex: 30‚Üí29) pour activer countingDown
  // - d√©clenche le son *une seule fois* quand on atteint 0s
  // - se r√©arme si un nouveau cycle repart (>0)
  useEffect(() => {
    const host = timerHostRef.current;
    if (!host) return;

    // reset s√©curit√©
    lastSecRef.current = null;
    countingDownRef.current = false;
    hasBeepedRef.current = false;

    const obs = new MutationObserver(() => {
      const txt = host.innerText || "";
      const curr = parseSeconds(txt);
      if (curr == null) return;

      const last = lastSecRef.current;

      // vraie descente d√©tect√©e (minuteur effectivement en cours)
      if (last != null && curr < last && curr > 0) {
        countingDownRef.current = true;
        hasBeepedRef.current = false; // pr√™t √† biper √† 0
      }

      // jouer le son uniquement √† la fin, si on a bien compt√© √† rebours
      if (countingDownRef.current && !hasBeepedRef.current && curr === 0) {
        hasBeepedRef.current = true;
        countingDownRef.current = false;
        void playFinishChime();
      }

      // si √ßa repart (>0) apr√®s une fin, on se r√©arme pour un nouveau cycle
      if (curr > 0 && hasBeepedRef.current) {
        // on attendra √† nouveau une vraie d√©cr√©mentation
        countingDownRef.current = false;
      }

      lastSecRef.current = curr;
    });

    obs.observe(host, { subtree: true, childList: true, characterData: true });
    return () => obs.disconnect();
  }, []);
  // ‚úÖ FIN AJOUTS

  if (status === "loading") return <main className="p-6">Chargement‚Ä¶</main>;

  return (
    <main className="max-w-3xl mx-auto p-6 space-y-8">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold">Lecteur Spotify</h1>
        {session ? (
          <button onClick={() => signOut({ callbackUrl: "/dashboard/music" })} className="btn-dash" title="Se d√©connecter">‚èª Se d√©connecter</button>
        ) : (
          <button onClick={() => signIn("spotify", { callbackUrl: "/dashboard/music" })} className="btn-dash" title="Se connecter">üîó Se connecter</button>
        )}
      </div>

      {/* Minuteur (espac√©) ‚Äî simplement wrapp√© pour l‚Äôobserver */}
      <div ref={timerHostRef}>
        <Timer />
      </div>

      {/* Player visible uniquement si connect√© */}
      {session ? <SpotifyPlayer /> : (
        <p className="text-sm" style={{color:"var(--muted)"}}>
          Connecte ton compte Spotify pour utiliser le lecteur.
        </p>
      )}
    </main>
  );
}
